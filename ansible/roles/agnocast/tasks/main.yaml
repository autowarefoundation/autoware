# Detect container environment
- name: Check if running in a container using systemd-detect-virt
  ansible.builtin.command: systemd-detect-virt -c
  register: agnocast_container_detection
  failed_when: false
  changed_when: false

- name: Set container environment fact
  ansible.builtin.set_fact:
    agnocast_is_container: "{{ agnocast_container_detection.rc == 0 }}"

- name: Display environment detection result
  ansible.builtin.debug:
    msg: "Running in container: {{ agnocast_is_container }} (detected: {{ agnocast_container_detection.stdout | default('none') }})"

# Check and install linux headers
- name: Check if linux-headers package is available
  ansible.builtin.shell: apt-cache search ^linux-headers-{{ ansible_kernel }}$ | grep -q linux-headers-{{ ansible_kernel }}
  register: agnocast_linux_headers_available
  failed_when: false
  changed_when: false
  become: true

- name: Display warning if linux-headers is not available
  ansible.builtin.debug:
    msg: "WARNING: linux-headers-{{ ansible_kernel }} package not found. The agnocast-kmod installation may fail. Please manually install the kernel headers and re-run this role."
  when: agnocast_linux_headers_available.rc != 0

- name: Install linux headers for the running kernel
  ansible.builtin.apt:
    name: linux-headers-{{ ansible_kernel }}
    state: present
  become: true
  when:
    - agnocast_linux_headers_available.rc == 0
    - not agnocast_is_container

# TODO(rej55, sykwer): IPv6 support
- name: Save current IPv6 settings
  ansible.builtin.shell: |
    sysctl net.ipv6.conf.all.disable_ipv6
    sysctl net.ipv6.conf.default.disable_ipv6
  register: agnocast_ipv6_settings
  changed_when: false
  become: true

- name: Temporarily disable IPv6
  ansible.posix.sysctl:
    name: "{{ item.name }}"
    value: 1
    sysctl_set: true
    state: present
  loop:
    - { name: net.ipv6.conf.all.disable_ipv6 }
    - { name: net.ipv6.conf.default.disable_ipv6 }
  become: true

- name: Add agnocast PPA repository while IPv6 is disabled
  ansible.builtin.apt_repository:
    repo: ppa:t4-system-software/agnocast
    state: present
    update_cache: false
  become: true

- name: Restore original IPv6 settings # noqa: no-changed-when
  ansible.posix.sysctl:
    name: "{{ item.split('=')[0] | trim }}"
    value: 0
    sysctl_set: true
    state: present
  loop: "{{ agnocast_ipv6_settings.stdout_lines }}"
  when: item is search('=\\s*0')
  become: true

- name: Update apt cache
  ansible.builtin.apt:
    update_cache: true
  become: true

- name: Install {{ agnocast_heaphook_package }}
  ansible.builtin.apt:
    name: "{{ agnocast_heaphook_package }}"
    state: present
  become: true

- name: Check if agnocast-kmod is installed in dkms with version v{{ agnocast_version }}
  ansible.builtin.shell: dkms status | grep agnocast | grep {{ agnocast_version }} # noqa: risky-shell-pipe
  register: agnocast_dkms_status
  failed_when: false
  changed_when: false
  when: not agnocast_is_container

- name: Purge agnocast-kmod if not found in dkms for version v{{ agnocast_version }}
  ansible.builtin.apt:
    name: "{{ agnocast_kmod_package }}"
    state: absent
  become: true
  when:
    - not agnocast_is_container
    - agnocast_dkms_status.rc != 0

- name: Display info when skipping agnocast-kmod in container
  ansible.builtin.debug:
    msg: "INFO: Skipping agnocast-kmod installation in container environment"
  when: agnocast_is_container

- name: Install agnocast-kmod if not found in dkms for version v{{ agnocast_version }}
  ansible.builtin.apt:
    name: "{{ agnocast_kmod_package }}"
    state: present
  become: true
  when:
    - not agnocast_is_container
    - agnocast_dkms_status.rc != 0

- name: Ensure agnocast module is loaded at boot via modules-load.d
  ansible.builtin.copy:
    dest: /etc/modules-load.d/agnocast.conf
    content: "agnocast\n"
    owner: root
    group: root
    mode: "0644"
  become: true
  when: not agnocast_is_container
