name: scenario-test
on:
  workflow_dispatch:

jobs:
  scenario-test:
    runs-on: ubuntu-24.04
    container: ghcr.io/autowarefoundation/autoware:universe-devel
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Free disk space
        uses: ./.github/actions/free-disk-space

      - name: Install base packages
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            unzip \
            curl \
            gnupg2 \
            lsb-release \
            python3-pip \
            git \
            ros-humble-pcl-ros \
            ros-humble-tinyxml2-vendor
          python3 -m pip install --user --upgrade gdown vcstool
        shell: bash

      - name: Configure environment
        run: |
          echo "PATH=$HOME/.local/bin:$PATH" >> $GITHUB_ENV
          mkdir -p /etc/ros/rosdep/sources.list.d/
          echo "yaml https://raw.githubusercontent.com/autowarefoundation/autoware/main/rosdep/autoware.yaml" | sudo tee /etc/ros/rosdep/sources.list.d/51-autoware.list

      - name: Clone Autoware stack
        run: |
          mkdir -p ~/autoware_ws/src
          cd ~/autoware_ws
          git clone --recurse-submodules https://github.com/autowarefoundation/autoware.git src/autoware
          cd src
          vcs import < autoware/simulator.repos
          vcs import < autoware/core.repos
        shell: bash

      - name: Resolve dependencies
        run: |
          cd ~/autoware_ws
          sudo rosdep fix-permissions
          rosdep update
          rosdep install --from-paths src --ignore-src -r -y \
            --skip-keys "libopengl-dev" \
            --skip-keys "libx11-dev" \
            --skip-keys "opengl"
        shell: bash

      - name: Build Autoware core
        run: |
          cd ~/autoware_ws
          source /opt/ros/humble/setup.bash
          colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE=Release
          source install/setup.bash
        shell: bash

      - name: Setup scenario files
        run: |
          gdown --id 1Tq7snfDPsuPHPtl50aL5fJY6paiC-HxV -O sample-scenario.yaml
          gdown --id 1499_nsbUbIeturZaDj7jhUownh5fvXHd -O sample-map-planning.zip
          mkdir -p /home/user/autoware_map
          unzip sample-map-planning.zip -d /home/user/autoware_map
          sed -i "s@/home/user/sample-map-planning/pointcloud_map.pcd@/home/user/autoware_map/sample-map-planning/pointcloud_map.pcd@g" sample-scenario.yaml
        shell: bash

      - name: Build simulation components
        run: |
          cd ~/autoware_ws
          source install/setup.bash
          colcon build --packages-select \
            scenario_test_runner \
            traffic_simulator \
            openscenario_interpreter \
            simple_sensor_simulator \
            --cmake-args -DCMAKE_BUILD_TYPE=Release
        shell: bash

      - name: Run scenario tests
        run: |
          mkdir -p ./results
          SCENARIO_FILE="./sample-scenario.yaml"
          source ~/autoware_ws/install/setup.bash
          ros2 launch scenario_test_runner scenario_test_runner.launch.py \
            architecture_type:=awf/universe/20250130 \
            record:=true \
            scenario:="$SCENARIO_FILE" \
            sensor_model:=sample_sensor_kit \
            vehicle_model:=sample_vehicle \
            initialize_duration:=100 \
            output_directory:=./results \
            simulate_localization:=false \
            disable_lanelet_pose_validation:=true 2>&1 | tee scenario_output.log
        shell: bash

      - name: Process results
        run: |
          RESULT_FILE="./results/test_results.log"
          XML_FILE="./results/junit_results.xml"
          
          if [ -f "$RESULT_FILE" ]; then
            echo "Processing test results..."
            FAILURES=$(grep -ci "failure" "$RESULT_FILE" || true)
            ERRORS=$(grep -ci "error" "$RESULT_FILE" || true)
            
            echo '<?xml version="1.0" encoding="UTF-8"?>' > "$XML_FILE"
            echo "<testsuite name='ScenarioTests' tests='1' failures='$FAILURES' errors='$ERRORS'>" >> "$XML_FILE"
            echo "  <testcase name='IntegrationTest' classname='ScenarioRunner'>" >> "$XML_FILE"
            
            if [ $FAILURES -gt 0 ] || [ $ERRORS -gt 0 ]; then
              echo "    <failure message='Scenario test failures detected'>" >> "$XML_FILE"
              cat "$RESULT_FILE" | sed 's/&/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g' >> "$XML_FILE"
              echo "    </failure>" >> "$XML_FILE"
            fi
            
            echo "  </testcase>" >> "$XML_FILE"
            echo "</testsuite>" >> "$XML_FILE"
          else
            echo "##[error] No test results found - simulation likely failed"
            echo "Debug output:"
            cat scenario_output.log
            exit 1
          fi
        shell: bash
