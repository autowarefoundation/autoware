name: Scenario Test

on:
  workflow_dispatch:

jobs:
  scenario-test:
    runs-on: ubuntu-latest
    container: ghcr.io/autowarefoundation/autoware:universe-devel
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set git config
        uses: autowarefoundation/autoware-github-actions/set-git-config@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Free disk space
        uses: ./.github/actions/free-disk-space

      - name: Download scenario file
        run: |
          gdown scenario_file_link
        shell: bash

      - name: Modify the map file path in scenario
        run: |
          sed 's/original_path/updated_path/g' scenario.yaml

      - name: Colcon build scenario_test_runner
        run: |
          colcon build --packages-select scenario_test_runner

      - name: Launch scenario_test_runner
        run: |
          ros2 launch scenario_test_runner scenario_test_runner.launch.py \
          architecture_type:=awf/universe/20250130 \
          record:=false \
          scenario:=/home/vishalchauhan/autoware_map/sample-scenario.yaml \
          sensor_model:=sample_sensor_kit \
          vehicle_model:=sample_vehicle \
          initialize_duration:=100 \
          output_directory:=/home/vishalchauhan/results
      - name: Parse results and detect failure
        run: |
          RESULT_FILE="/results/test_results.log"
          XML_FILE="/results/scenario_test_runner/result.junit.xml"

          # Check if the result file exists
          if [ -f "$RESULT_FILE" ]; then
              echo "Parsing test results..."
              
              # Count failures
              FAILURES=$(grep -i "failure" "$RESULT_FILE" | wc -l)
              ERRORS=$(grep -i "error" "$RESULT_FILE" | wc -l)
              
              # Generate XML output
              echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" > "$XML_FILE"
              echo "<testsuite name='ScenarioTest' failures='$FAILURES' errors='$ERRORS'>" >> "$XML_FILE"
              
              while IFS= read -r line; do
                  if echo "$line" | grep -qi "failure"; then
                      echo "  <testcase name='$line'>" >> "$XML_FILE"
                      echo "    <failure message='Detected failure'>$line</failure>" >> "$XML_FILE"
                      echo "  </testcase>" >> "$XML_FILE"
                  elif echo "$line" | grep -qi "error"; then
                      echo "  <testcase name='$line'>" >> "$XML_FILE"
                      echo "    <error message='Detected error'>$line</error>" >> "$XML_FILE"
                      echo "  </testcase>" >> "$XML_FILE"
                  fi
              done < "$RESULT_FILE"

              echo "</testsuite>" >> "$XML_FILE"
              echo "Results parsed and saved in $XML_FILE"
          else
              echo "No result file found, marking as failure."
              exit 1
          fi
