name: scenario-test
on:
  workflow_dispatch:

jobs:
  scenario-test:
    runs-on: [self-hosted, Linux, X64]
    container: ghcr.io/autowarefoundation/autoware:universe-devel
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Show disk space before the tasks
        run: df -h

      - name: Show machine specs
        run: lscpu && free -h

      - name: Install required packages
        run: |
          apt-get update
          apt-get install -y \
            unzip \
            curl \
            gnupg2 \
            lsb-release \
            python3-pip \
            git \
            ros-humble-pcl-ros
          pip install --upgrade gdown vcstool
        shell: bash

      - name: Clone Autoware and Import simulator.repos
        run: |
          mkdir -p ~/autoware_ws/src
          cd ~/autoware_ws
          git clone --recurse-submodules https://github.com/autowarefoundation/autoware.git src/autoware
          cd src
          vcs import < autoware/simulator.repos
        shell: bash

      - name: Install ROS dependencies
        run: |
          cd ~/autoware_ws
          rosdep update
          rosdep install --from-paths src --ignore-src -r -y
        shell: bash

      - name: Downgrade xmlschema
        run: |
          pip3 install --user xmlschema==3.4.5
        shell: bash

      - name: Build Autoware
        run: |
          cd ~/autoware_ws
          source /opt/ros/humble/setup.bash
          source /opt/autoware/setup.bash
          colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE=Release
          source install/setup.bash
        shell: bash

      - name: Check Autoware installation
        run: |
          source ~/autoware_ws/install/setup.bash
          ros2 pkg list | grep autoware
        shell: bash

      - name: Download scenario file
        run: |
          gdown --id 1Tq7snfDPsuPHPtl50aL5fJY6paiC-HxV -O sample-scenario.yaml
        shell: bash

      - name: Download sample-map-planning maps
        # cspell:disable
        run: |
          gdown --id 1499_nsbUbIeturZaDj7jhUownh5fvXHd -O sample-map-planning.zip
          mkdir -p /home/user/autoware_map
          unzip sample-map-planning.zip -d /home/user/autoware_map
        # cspell:enable
        shell: bash

      - name: Fix path in sample-scenario.yaml
        run: |
          sed -i "s@/home/user/sample-map-planning/pointcloud_map.pcd@/home/user/autoware_map/sample-map-planning/pointcloud_map.pcd@g" sample-scenario.yaml
        shell: bash

      - name: Build workspace
        run: |
          cd ~/autoware_ws
          source ~/autoware_ws/install/setup.bash
          colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE=Release
          source install/setup.bash
        shell: bash

      - name: Check lanelet parameters in config file
        run: |
          echo "Lanelet-related parameters in the configuration:"
          grep -i "lanelet" /github/home/autoware_ws/install/scenario_test_runner/share/scenario_test_runner/config/parameters.yaml || true
        shell: bash

      - name: Launch scenario_test_runner with diagnostics
        run: |
          SCENARIO_FILE="./sample-scenario.yaml"
          source ~/autoware_ws/install/setup.bash
          if [ -f "$SCENARIO_FILE" ]; then
            echo "Launching scenario_test_runner..."
            mkdir -p ./results
            ros2 launch scenario_test_runner scenario_test_runner.launch.py \
              architecture_type:=awf/universe/20250130 \
              record:=true \
              scenario:="$SCENARIO_FILE" \
              sensor_model:=sample_sensor_kit \
              vehicle_model:=sample_vehicle \
              initialize_duration:=100 \
              output_directory:=./results \
              simulate_localization:=false \
              disable_lanelet_pose_validation:=true 2>&1 | tee scenario_output.log || true
          else
            echo "ERROR: sample-scenario.yaml is missing!"
            exit 1
          fi
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: scenario-test-results
          path: ./results

      - name: Parse results and capture diagnostics
        run: |
          RESULT_FILE="./results/test_results.log"
          XML_FILE="./results/scenario_test_runner/result.junit.xml"

          if [ -f "$RESULT_FILE" ]; then
            echo "Parsing test results..."
            FAILURES=$(grep -i "failure" "$RESULT_FILE" | wc -l)
            ERRORS=$(grep -i "error" "$RESULT_FILE" | wc -l)

            echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" > "$XML_FILE"
            echo "<testsuite name='ScenarioTest' failures='$FAILURES' errors='$ERRORS'>" >> "$XML_FILE"

            FOUND_ISSUES=0
            while IFS= read -r line; do
              if echo "$line" | grep -qi "failure"; then
                echo "  <testcase name='$line'>" >> "$XML_FILE"
                echo "    <failure message='Detected failure'>$line</failure>" >> "$XML_FILE"
                echo "  </testcase>" >> "$XML_FILE"
                FOUND_ISSUES=1
              elif echo "$line" | grep -qi "error"; then
                echo "  <testcase name='$line'>" >> "$XML_FILE"
                echo "    <error message='Detected error'>$line</error>" >> "$XML_FILE"
                echo "  </testcase>" >> "$XML_FILE"
                FOUND_ISSUES=1
              fi
            done < "$RESULT_FILE"

            echo "</testsuite>" >> "$XML_FILE"
            echo "Results parsed and saved in $XML_FILE"

            if [ $FOUND_ISSUES -eq 1 ]; then
              echo "ERROR: Detected failures or errors in the simulation."
              exit 1
            fi
          else
            echo "ERROR: test_results.log is missing! The simulation might have crashed."
            echo "Captured scenario output (for diagnostics):"
            cat scenario_output.log
            exit 1
          fi
        shell: bash
