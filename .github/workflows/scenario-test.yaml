name: scenario-test
on:
  workflow_dispatch:

jobs:
  scenario-test:
    runs-on: ubuntu-24.04
    container: ghcr.io/autowarefoundation/autoware:universe-devel
    steps:
      # 1) Check out your repository
      - name: Check out repository
        uses: actions/checkout@v4

      # 2) Configure Git
      - name: Set git config
        run: |
          git config --global user.name github-actions
          git config --global user.email github-actions@github.com

      # 3) (Optional) Free disk space if you have a local action for it
      - name: Free disk space
        run: |
          BEFORE=$(df -h)
          sudo apt-get autoremove -y || echo "::warning::The command [sudo apt-get autoremove -y] failed to complete successfully. Proceeding..."
          sudo apt-get clean || echo "::warning::The command [sudo apt-get clean] failed to complete successfully. Proceeding..."
          AFTER=$(df -h)
          echo "Disk space before cleanup:"
          echo "$BEFORE"
          echo "Disk space after cleanup:"
          echo "$AFTER"
        shell: bash

      # 4) Install unzip and ROS2
      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y unzip curl gnupg2 lsb-release
          curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | apt-key add -
          sh -c 'echo "deb http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" > /etc/apt/sources.list.d/ros2-latest.list'
          apt-get update
          apt-get install -y ros-foxy-desktop
          source /opt/ros/foxy/setup.bash
        shell: bash

      # 5) Download scenario.yaml (separate from sample-scenario.yaml)
      - name: Download scenario file
        run: |
          gdown --id 1Tq7snfDPsuPHPtl50aL5fJY6paiC-HxV -O sample-scenario.yaml
        shell: bash

      # 6) Verify the scenario file exists
      - name: Verify scenario file
        run: |
          if [ ! -f sample-scenario.yaml ]; then
            echo "ERROR: sample-scenario.yaml not found!"
            exit 1
          fi
        shell: bash

      # 7) Download and extract sample-map-planning maps
      - name: Download sample-map-planning maps
        run: |
          gdown --id 1499_nsbUbIeturZaDj7jhUownh5fvXHd -O sample-map-planning.zip
          mkdir -p /home/vishalchauhan/autoware_map
          unzip sample-map-planning.zip -d /home/vishalchauhan/autoware_map
        shell: bash

      # 8) Modify the map file path in scenario.yaml
      - name: Modify the map file path in scenario
        run: |
          original_path="/home/user/autoware_map"
          original_path2="/home/user/sample-map-planning"
          updated_path="/home/vishalchauhan/autoware_map"
          if [ -f sample-scenario.yaml ]; then
            sed -i "s|${original_path}|${updated_path}|g" sample-scenario.yaml
            sed -i "s|${original_path2}|${updated_path}|g" sample-scenario.yaml
          else
            echo "ERROR: sample-scenario.yaml not found!"
            exit 1
          fi
        shell: bash

      # 9) Build all packages with colcon
      - name: Build all packages
        run: |
          cd /home/vishalchauhan
          source /opt/ros/foxy/setup.bash
          colcon build
          source install/setup.bash
          echo "Listing packages in the workspace:"
          colcon list
        shell: bash

      # 10) Launch scenario_test_runner
      - name: Launch scenario_test_runner
        run: |
          source /opt/ros/foxy/setup.bash
          source install/setup.bash
          SCENARIO_FILE="/home/vishalchauhan/sample-scenario.yaml"
          if [ -f "$SCENARIO_FILE" ]; then
            echo "Launching scenario_test_runner..."
            ros2 launch scenario_test_runner scenario_test_runner.launch.py \
              architecture_type:=awf/universe/20250130 \
              record:=false \
              scenario:="$SCENARIO_FILE" \
              sensor_model:=sample_sensor_kit \
              vehicle_model:=sample_vehicle \
              initialize_duration:=100 \
              output_directory:=/home/vishalchauhan/results
          else
            echo "ERROR: sample-scenario.yaml is missing!"
            exit 1
          fi
        shell: bash

      # 11) Parse results and detect failure
      - name: Parse results and detect failure
        run: |
          RESULT_FILE="/home/vishalchauhan/results/test_results.log"
          XML_FILE="/home/vishalchauhan/results/scenario_test_runner/result.junit.xml"

          if [ -f "$RESULT_FILE" ]; then
            echo "Parsing test results..."
            FAILURES=$(grep -i "failure" "$RESULT_FILE" | wc -l)
            ERRORS=$(grep -i "error" "$RESULT_FILE" | wc -l)
            
            echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" > "$XML_FILE"
            echo "<testsuite name='ScenarioTest' failures='$FAILURES' errors='$ERRORS'>" >> "$XML_FILE"
            
            while IFS= read -r line; do
              if echo "$line" | grep -qi "failure"; then
                echo "  <testcase name='$line'>" >> "$XML_FILE"
                echo "    <failure message='Detected failure'>$line</failure>" >> "$XML_FILE"
                echo "  </testcase>" >> "$XML_FILE"
              elif echo "$line" | grep -qi "error"; then
                echo "  <testcase name='$line'>" >> "$XML_FILE"
                echo "    <error message='Detected error'>$line</error>" >> "$XML_FILE"
              fi
            done < "$RESULT_FILE"

            echo "</testsuite>" >> "$XML_FILE"
            echo "Results parsed and saved in $XML_FILE"
          else
            echo "No result file found, marking as failure."
            exit 1
          fi
        shell: bash
