name: scenario-test
on:
  workflow_dispatch:

jobs:
  scenario-test:
    runs-on: ubuntu-22.04
    container: ghcr.io/autowarefoundation/autoware:universe-devel

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Free disk space
        uses: ./.github/actions/free-disk-space

      - name: Install required packages
        run: |
          apt-get update
          apt-get install -y unzip curl gnupg2 lsb-release python3-pip git
          pip install --upgrade gdown vcstool
        shell: bash

      - name: Setup Autoware workspace
        run: |
          mkdir -p ~/autoware_ws/src
          cd ~/autoware_ws
          git clone --recurse-submodules https://github.com/autowarefoundation/autoware.git src/autoware
          cd src
          vcs import < autoware/simulator.repos
        shell: bash

      - name: Fix missing dependencies manually
        run: |
          cd ~/autoware_ws/src
          git clone https://github.com/tier4/tier4_external_api_msgs.git
        shell: bash

      - name: Install ROS dependencies
        run: |
          cd ~/autoware_ws
          source /opt/ros/humble/setup.bash
          rosdep update
          rosdep install --from-paths src --ignore-src -r -y
        shell: bash

      - name: Build Autoware
        run: |
          cd ~/autoware_ws
          source /opt/ros/humble/setup.bash
          colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE=Release
          source install/setup.bash
        shell: bash

      - name: Download sample-scenario.yaml
        run: |
          gdown --id 1Tq7snfDPsuPHPtl50aL5fJY6paiC-HxV -O sample-scenario.yaml
        shell: bash

      - name: Download sample-map-planning
        run: |
          gdown --id 1499_nsbUbIeturZaDj7jhUownh5fvXHd -O sample-map-planning.zip
          mkdir -p /home/user/autoware_map
          unzip sample-map-planning.zip -d /home/user/autoware_map
        shell: bash

      - name: Fix path in scenario file
        run: |
          sed -i "s@/home/user/sample-map-planning/pointcloud_map.pcd@/home/user/autoware_map/sample-map-planning/pointcloud_map.pcd@g" sample-scenario.yaml
        shell: bash

      - name: Launch scenario_test_runner
        run: |
          cd ~/autoware_ws
          source install/setup.bash
          ros2 launch scenario_test_runner scenario_test_runner.launch.py \
            architecture_type:=awf/universe/20250130 \
            record:=true \
            scenario:=./sample-scenario.yaml \
            sensor_model:=sample_sensor_kit \
            vehicle_model:=sample_vehicle \
            initialize_duration:=100 \
            output_directory:=./results \
            simulate_localization:=false \
            disable_lanelet_pose_validation:=true
        shell: bash

      - name: Parse results
        run: |
          RESULT_FILE="./results/test_results.log"
          XML_FILE="./results/scenario_test_runner/result.junit.xml"

          if [ -f "$RESULT_FILE" ]; then
            echo "Parsing test results..."
            FAILURES=$(grep -i "failure" "$RESULT_FILE" | wc -l)
            ERRORS=$(grep -i "error" "$RESULT_FILE" | wc -l)

            echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" > "$XML_FILE"
            echo "<testsuite name='ScenarioTest' failures='$FAILURES' errors='$ERRORS'>" >> "$XML_FILE"

            while IFS= read -r line; do
              if echo "$line" | grep -qi "failure"; then
                echo "  <testcase name='$line'>" >> "$XML_FILE"
                echo "    <failure message='Detected failure'>$line</failure>" >> "$XML_FILE"
                echo "  </testcase>" >> "$XML_FILE"
              elif echo "$line" | grep -qi "error"; then
                echo "  <testcase name='$line'>" >> "$XML_FILE"
                echo "    <error message='Detected error'>$line</error>" >> "$XML_FILE"
                echo "  </testcase>" >> "$XML_FILE"
              fi
            done < "$RESULT_FILE"

            echo "</testsuite>" >> "$XML_FILE"
            echo "Results parsed and saved in $XML_FILE"
          else
            echo "WARNING: test_results.log is missing! The simulation might have crashed."
          fi
        shell: bash
