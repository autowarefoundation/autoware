name: scenario-test
on:
  workflow_dispatch:

jobs:
  scenario-test:
    runs-on: ubuntu-24.04
    container:
      image: ghcr.io/autowarefoundation/autoware:universe-devel
      # If you're on a self-hosted runner and DNS fails, try:
      # options: --network=host

    steps:
      # Step 1) Must checkout the repository (GitHub Actions requirement)
      - name: Check out repository
        uses: actions/checkout@v4

      # Step 2) Run EVERYTHING in one script
      - name: Build and Run Scenario
        run: |
          set -e  # Exit on first error

          echo "===== 1) Install dependencies ====="
          apt-get update
          apt-get install -y unzip curl gnupg2 lsb-release python3-pip git
          pip install --upgrade gdown vcstool

          if ! command -v ros2 &> /dev/null; then
            echo "ROS 2 not found. Installing..."
            curl -fsSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | gpg --dearmor -o /usr/share/keyrings/ros-archive-keyring.gpg
            echo "deb [signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/ros2-latest.list
            apt-get update
            apt-get install -y ros-humble-desktop
          else
            echo "ROS 2 is already installed in the container."
          fi

          echo "===== 2) Check connectivity ====="
          curl -I https://github.com
          echo "Connectivity test passed!"

          echo "===== 3) Clone Autoware + simulator.repos ====="
          mkdir -p ~/autoware_ws/src
          cd ~/autoware_ws
          git clone --recurse-submodules https://github.com/autowarefoundation/autoware.git src/autoware
          cd src
          vcs import < autoware/simulator.repos

          echo "===== 4) Install ROS dependencies ====="
          cd ~/autoware_ws
          rosdep update
          rosdep install --from-paths src --ignore-src --rosdistro humble -r -y

          echo "===== 5) Download tier4_external_api_msgs as ZIP (avoid git) ====="
          cd ~/autoware_ws/src
          if [ ! -d "tier4_external_api_msgs" ]; then
            echo "Downloading tier4_external_api_msgs..."
            curl -L https://github.com/tier4/tier4_external_api_msgs/archive/refs/heads/main.zip -o tier4_external_api_msgs.zip
            unzip tier4_external_api_msgs.zip
            mv tier4_external_api_msgs-main tier4_external_api_msgs
            rm tier4_external_api_msgs.zip
          fi

          echo "===== 6) Build Autoware ====="
          cd ~/autoware_ws
          source /opt/ros/humble/setup.bash
          colcon build --symlink-install
          source install/setup.bash

          echo "===== 7) Download scenario.yaml ====="
          gdown --id 1Tq7snfDPsuPHPtl50aL5fJY6paiC-HxV -O sample-scenario.yaml

          echo "===== 8) Download sample-map-planning maps ====="
          gdown --id 1499_nsbUbIeturZaDj7jhUownh5fvXHd -O sample-map-planning.zip
          unzip sample-map-planning.zip

          echo "===== 9) Build scenario_test_runner ====="
          source ~/autoware_ws/install/setup.bash
          colcon build --packages-select scenario_test_runner
          source install/setup.bash

          echo "===== 10) Launch scenario_test_runner ====="
          SCENARIO_FILE="./sample-scenario.yaml"
          if [ -f "$SCENARIO_FILE" ]; then
            ros2 launch scenario_test_runner scenario_test_runner.launch.py \
              architecture_type:=awf/universe/20250130 \
              record:=false \
              scenario:="$SCENARIO_FILE" \
              sensor_model:=sample_sensor_kit \
              vehicle_model:=sample_vehicle \
              initialize_duration:=100 \
              output_directory:=./results
          else
            echo "ERROR: sample-scenario.yaml is missing!"
            exit 1
          fi

          echo "===== 11) Parse results and detect failure ====="
          RESULT_FILE="./results/test_results.log"
          XML_FILE="./results/scenario_test_runner/result.junit.xml"

          if [ -f "$RESULT_FILE" ]; then
            echo "Parsing test results..."
            FAILURES=$(grep -i "failure" "$RESULT_FILE" | wc -l)
            ERRORS=$(grep -i "error" "$RESULT_FILE" | wc -l)
            
            echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" > "$XML_FILE"
            echo "<testsuite name='ScenarioTest' failures='$FAILURES' errors='$ERRORS'>" >> "$XML_FILE"
            
            while IFS= read -r line; do
              if echo "$line" | grep -qi "failure"; then
                echo "  <testcase name='$line'>" >> "$XML_FILE"
                echo "    <failure message='Detected failure'>$line</failure>" >> "$XML_FILE"
                echo "  </testcase>" >> "$XML_FILE"
              elif echo "$line" | grep -qi "error"; then
                echo "  <testcase name='$line'>" >> "$XML_FILE"
                echo "    <error message='Detected error'>$line</error>" >> "$XML_FILE"
                echo "  </testcase>" >> "$XML_FILE"
              fi
            done < "$RESULT_FILE"

            echo "</testsuite>" >> "$XML_FILE"
            echo "Results parsed and saved in $XML_FILE"
          else
            echo "ERROR: test_results.log is missing! Check the scenario execution logs."
            exit 1
          fi
        shell: bash
