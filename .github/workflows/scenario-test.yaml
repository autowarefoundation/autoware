name: scenario-test
on:
  workflow_dispatch:

jobs:
  scenario-test:
    runs-on: ubuntu-24.04
    container: ghcr.io/autowarefoundation/autoware:universe-devel
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Free disk space
        uses: ./.github/actions/free-disk-space

      - name: Install required packages
        run: |
          apt-get update
          apt-get install -y \
            unzip \
            curl \
            gnupg2 \
            lsb-release \
            python3-pip \
            git \
            ros-humble-pcl-ros
          pip install --upgrade gdown vcstool
        shell: bash

      - name: Clone Autoware and Import simulator.repos
        run: |
          mkdir -p ~/autoware_ws/src
          cd ~/autoware_ws

          # Clone Autoware repository
          if [ ! -d "src/autoware" ]; then
            echo "Cloning Autoware..."
            git clone --recurse-submodules https://github.com/autowarefoundation/autoware.git src/autoware
          else
            echo "Autoware repository already exists, skipping clone."
          fi

          cd src
          
          # Import missing repositories
          vcs import < autoware/simulator.repos || echo "WARNING: vcs import encountered issues."

        shell: bash

      - name: Install ROS dependencies
        run: |
          cd ~/autoware_ws
          rosdep update
          rosdep install --from-paths src --ignore-src -r -y
        shell: bash

      - name: Build Autoware
        run: |
          cd ~/autoware_ws
          source /opt/ros/humble/setup.bash     
          source /opt/autoware/setup.bash
          colcon build --symlink-install
          source install/setup.bash
        shell: bash

      - name: Check Autoware installation
        run: |
          source ~/autoware_ws/install/setup.bash
          ros2 pkg list | grep autoware
        shell: bash

      - name: Download scenario file
        run: |
          gdown --id 1Tq7snfDPsuPHPtl50aL5fJY6paiC-HxV -O sample-scenario.yaml
        shell: bash

      - name: Download sample-map-planning maps
        run: |
          gdown --id 1499_nsbUbIeturZaDj7jhUownh5fvXHd -O sample-map-planning.zip
          mkdir -p /home/user/autoware_map
          unzip sample-map-planning.zip -d /home/user/autoware_map
        shell: bash

      - name: Rebuild workspace
        run: |
          source ~/autoware_ws/install/setup.bash
          colcon build --symlink-install
          source install/setup.bash
        shell: bash

      - name: Set Permissions for Log Files
        run: |
          mkdir -p ./results /github/home/.ros/log
          chmod -R 777 ./results /github/home/.ros/log
        shell: bash

      - name: Launch scenario_test_runner
        run: |
          SCENARIO_FILE="./sample-scenario.yaml"
          source ~/autoware_ws/install/setup.bash
          if [ -f "$SCENARIO_FILE" ]; then
            echo "Launching scenario_test_runner..."
            ros2 launch scenario_test_runner scenario_test_runner.launch.py \
              architecture_type:=awf/universe/20250130 \
              record:=true \
              scenario:="$SCENARIO_FILE" \
              sensor_model:=sample_sensor_kit \
              vehicle_model:=sample_vehicle \
              initialize_duration:=150 \
              output_directory:=./results 2>&1 | tee scenario_output.log || true
          else
            echo "ERROR: sample-scenario.yaml is missing!"
            exit 1
          fi
        shell: bash

      - name: Wait for Scenario Execution to Complete
        run: |
          echo "Waiting for scenario execution..."
          sleep 30
        shell: bash

      - name: Check for Results
        run: |
          echo "Checking if results log exists..."
          ls -lah ./results || echo "No results found in ./results"
          ls -lah /github/home/.ros/log || echo "No results found in /github/home/.ros/log"
        shell: bash

      - name: Parse results and detect failure
        run: |
          RESULT_FILE="./results/test_results.log"
          ALT_RESULT_FILE="/github/home/.ros/log/test_results.log"
          XML_FILE="./results/scenario_test_runner/result.junit.xml"

          if [ -f "$RESULT_FILE" ]; then
            echo "Parsing test results from ./results/test_results.log..."
            LOG_PATH="$RESULT_FILE"
          elif [ -f "$ALT_RESULT_FILE" ]; then
            echo "Parsing test results from /github/home/.ros/log/test_results.log..."
            LOG_PATH="$ALT_RESULT_FILE"
          else
            echo "ERROR: No test results log found!"
            ls -lah ./results /github/home/.ros/log
            exit 1
          fi

          FAILURES=$(grep -i "failure" "$LOG_PATH" | wc -l)
          ERRORS=$(grep -i "error" "$LOG_PATH" | wc -l)
          
          echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" > "$XML_FILE"
          echo "<testsuite name='ScenarioTest' failures='$FAILURES' errors='$ERRORS'>" >> "$XML_FILE"
          
          while IFS= read -r line; do
            if echo "$line" | grep -qi "failure"; then
              echo "  <testcase name='$line'>" >> "$XML_FILE"
              echo "    <failure message='Detected failure'>$line</failure>" >> "$XML_FILE"
              echo "  </testcase>" >> "$XML_FILE"
            elif echo "$line" | grep -qi "error"; then
              echo "  <testcase name='$line'>" >> "$XML_FILE"
              echo "    <error message='Detected error'>$line</error>" >> "$XML_FILE"
              echo "  </testcase>" >> "$XML_FILE"
            fi
          done < "$LOG_PATH"
      
          echo "</testsuite>" >> "$XML_FILE"
          echo "Results parsed and saved in $XML_FILE"
        shell: bash
