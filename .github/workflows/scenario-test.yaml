name: scenario-test
on:
  workflow_dispatch:

jobs:
  scenario-test:
    runs-on: ubuntu-24.04
    container: ghcr.io/autowarefoundation/autoware:universe-devel

    steps:
      # Step 1) Check out your repository
      - name: Step 1 - Check out repository
        uses: actions/checkout@v4

      # Step 2) Free up disk space
      - name: Step 2 - Free disk space
        uses: ./.github/actions/free-disk-space

      # Step 3) Install required packages
      - name: Step 3 - Install required packages
        run: |
          apt-get update
          apt-get install -y unzip curl gnupg2 lsb-release python3-pip git ros-humble-pcl-ros
          pip install --upgrade gdown vcstool
        shell: bash

      # Step 4) Clone Autoware and import simulator.repos
      - name: Step 4 - Clone Autoware and Import simulator.repos
        run: |
          mkdir -p ~/autoware_ws/src
          cd ~/autoware_ws
          git clone --recurse-submodules https://github.com/autowarefoundation/autoware.git src/autoware
          cd src
          vcs import < autoware/simulator.repos
        shell: bash

      # Step 5) Install ROS dependencies
      - name: Step 5 - Install ROS dependencies
        run: |
          cd ~/autoware_ws
          rosdep update
          rosdep install --from-paths src --ignore-src -r -y
        shell: bash

      # Step 6) Build Autoware (full workspace build)
      - name: Step 6 - Build Autoware
        run: |
          cd ~/autoware_ws
          source /opt/ros/humble/setup.bash     
          source /opt/autoware/setup.bash
          colcon build --symlink-install
          source install/setup.bash
        shell: bash

      # Step 7) Verify Autoware installation
      - name: Step 7 - Check Autoware installation
        run: |
          source ~/autoware_ws/install/setup.bash
          ros2 pkg list | grep autoware
        shell: bash

      # Step 8) Download scenario file
      - name: Step 8 - Download scenario file
        run: |
          gdown --id 1Tq7snfDPsuPHPtl50aL5fJY6paiC-HxV -O sample-scenario.yaml
        shell: bash

      # Step 9) Download and extract map
      - name: Step 9 - Download and extract map
        run: |
          gdown --id 1499_nsbUbIeturZaDj7jhUownh5fvXHd -O sample-map-planning.zip
          mkdir -p /home/user/autoware_map
          unzip -o sample-map-planning.zip -d /home/user/autoware_map
        shell: bash

      # Step 10) Fix path in sample-scenario.yaml
      - name: Step 10 - Fix PCD map path in sample-scenario.yaml
        run: |
          sed -i "s@/home/user/sample-map-planning/pointcloud_map.pcd@/home/user/autoware_map/sample-map-planning/pointcloud_map.pcd@g" sample-scenario.yaml
        shell: bash

      # Step 11) Rebuild workspace
      - name: Step 11 - Rebuild Autoware workspace
        run: |
          source ~/autoware_ws/install/setup.bash
          colcon build --symlink-install
          source install/setup.bash
        shell: bash

      # Step 12) Print lanelet-related config (debugging)
      - name: Step 12 - Print lanelet config
        run: |
          echo "Lanelet-related parameters in the configuration:"
          grep -i "lanelet" ~/autoware_ws/install/scenario_test_runner/share/scenario_test_runner/config/parameters.yaml || true
        shell: bash

      # Step 13) Run scenario_test_runner with diagnostics
      - name: Step 13 - Run scenario_test_runner
        run: |
          source ~/autoware_ws/install/setup.bash
          echo "Launching scenario_test_runner..."
          ros2 launch scenario_test_runner scenario_test_runner.launch.py \
            architecture_type:=awf/universe/20250130 \
            record:=true \
            scenario:=./sample-scenario.yaml \
            sensor_model:=sample_sensor_kit \
            vehicle_model:=sample_vehicle \
            initialize_duration:=100 \
            output_directory:=./results \
            simulate_localization:=false \
            disable_lanelet_pose_validation:=true \
            use_sim_time:=false 2>&1 | tee scenario_output.log || true
        shell: bash

      # Step 14) Parse results
      - name: Step 14 - Parse results
        run: |
          RESULT_FILE="./results/test_results.log"
          XML_FILE="./results/scenario_test_runner/result.junit.xml"

          if [ -f "$RESULT_FILE" ]; then
            echo "Parsing test results..."
            FAILURES=$(grep -i "failure" "$RESULT_FILE" | wc -l)
            ERRORS=$(grep -i "error" "$RESULT_FILE" | wc -l)
            
            echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" > "$XML_FILE"
            echo "<testsuite name='ScenarioTest' failures='$FAILURES' errors='$ERRORS'>" >> "$XML_FILE"

            while IFS= read -r line; do
              if echo "$line" | grep -qi "failure"; then
                echo "  <testcase name='$line'>" >> "$XML_FILE"
                echo "    <failure message='Detected failure'>$line</failure>" >> "$XML_FILE"
                echo "  </testcase>" >> "$XML_FILE"
              elif echo "$line" | grep -qi "error"; then
                echo "  <testcase name='$line'>" >> "$XML_FILE"
                echo "    <error message='Detected error'>$line</error>" >> "$XML_FILE"
                echo "  </testcase>" >> "$XML_FILE"
              fi
            done < "$RESULT_FILE"

            echo "</testsuite>" >> "$XML_FILE"
            echo "Results saved in $XML_FILE"
          else
            echo "WARNING: test_results.log is missing! The simulation might have crashed."
            echo "Captured scenario output:"
            cat scenario_output.log
          fi
        shell: bash
