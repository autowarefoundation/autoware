\name: scenario-test
on:
  workflow_dispatch:

jobs:
  scenario-test:
    runs-on: ubuntu-24.04
    container: ghcr.io/autowarefoundation/autoware:universe-devel
    steps:
      # 1) Check out your repository
      - name: Check out repository
        uses: actions/checkout@v4

      # 2) Free disk space if you have a local action for it
      - name: Free disk space
        uses: ./.github/actions/free-disk-space

      # 3) Install unzip and ROS 2 (if needed)
      - name: Install unzip and ROS 2
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip curl gnupg2 lsb-release
          if ! command -v ros2 &> /dev/null; then
            echo "ROS 2 not found. Installing..."
            sudo curl -fsSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | sudo gpg --dearmor -o /usr/share/keyrings/ros-archive-keyring.gpg
            echo "deb [signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/ros2-latest.list
            sudo apt-get update
            sudo apt-get install -y ros-humble-desktop
          else
            echo "ROS 2 is already installed."
          fi
        shell: bash

      # 4) Download scenario.yaml (separate from sample-scenario.yaml)
      - name: Download scenario file
        run: |
          gdown --id 1Tq7snfDPsuPHPtl50aL5fJY6paiC-HxV -O sample-scenario.yaml
        shell: bash

      # 5) Download and extract sample-map-planning maps
      - name: Download sample-map-planning maps
        run: |
          gdown --id 1499_nsbUbIeturZaDj7jhUownh5fvXHd -O sample-map-planning.zip
          unzip sample-map-planning.zip
        shell: bash

      # 6) Install dependencies using rosdep
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-rosdep
          sudo rosdep init
          rosdep update
          rosdep install --from-paths src --ignore-src -r -y
        shell: bash

      # 7) Build scenario_test_runner (and its dependencies) with colcon
      - name: Build scenario_test_runner
        run: |
          source /opt/ros/humble/setup.bash
          colcon build --packages-select scenario_test_runner
          source install/setup.bash
        shell: bash

      # 8) Verify scenario_test_runner package
      - name: Verify scenario_test_runner package
        run: |
          source /opt/ros/humble/setup.bash
          if ! ros2 pkg list | grep -q scenario_test_runner; then
            echo "ERROR: scenario_test_runner package not found!"
            exit 1
          fi
        shell: bash

      # 9) Launch scenario_test_runner
      - name: Launch scenario_test_runner
        run: |
          SCENARIO_FILE="./sample-scenario.yaml"
          source /opt/ros/humble/setup.bash
          if [ -f "$SCENARIO_FILE" ]; then
            echo "Launching scenario_test_runner..."
            ros2 launch scenario_test_runner scenario_test_runner.launch.py \
              architecture_type:=awf/universe/20250130 \
              record:=false \
              scenario:="$SCENARIO_FILE" \
              sensor_model:=sample_sensor_kit \
              vehicle_model:=sample_vehicle \
              initialize_duration:=100 \
              output_directory:=./results
          else
            echo "ERROR: sample-scenario.yaml is missing!"
            exit 1
          fi
        shell: bash

      # 10) Parse results and detect failure
      - name: Parse results and detect failure
        run: |
          RESULT_FILE="./results/test_results.log"
          XML_FILE="./results/scenario_test_runner/result.junit.xml"

          if [ -f "$RESULT_FILE" ]; then
            echo "Parsing test results..."
            FAILURES=$(grep -i "failure" "$RESULT_FILE" | wc -l)
            ERRORS=$(grep -i "error" "$RESULT_FILE" | wc -l)
            
            echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" > "$XML_FILE"
            echo "<testsuite name='ScenarioTest' failures='$FAILURES' errors='$ERRORS'>" >> "$XML_FILE"
            
            while IFS= read -r line; do
              if echo "$line" | grep -qi "failure"; then
                echo "  <testcase name='$line'>" >> "$XML_FILE"
                echo "    <failure message='Detected failure'>$line</failure>" >> "$XML_FILE"
                echo "  </testcase>" >> "$XML_FILE"
              elif echo "$line" | grep -qi "error"; then
                echo "  <testcase name='$line'>" >> "$XML_FILE"
                echo "    <error message='Detected error'>$line</error>" >> "$XML_FILE"
              fi
            done < "$RESULT_FILE"

            echo "</testsuite>" >> "$XML_FILE"
            echo "Results parsed and saved in $XML_FILE"
          else
            echo "No result file found, marking as failure."
            exit 1
          fi
        shell: bash
