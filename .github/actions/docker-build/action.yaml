name: docker-build
description: Composite action to build images only.

inputs:
  platform:
    description: Target platform.
    required: true
  cache-tag-suffix:
    description: Suffix of the target cache tag.
    required: true
  additional-repos:
    description: Additional target .repos file.
    default: ""
    required: false
  build-args:
    description: Additional build args.
    required: false

runs:
  using: composite
  steps:
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Install vcstool
      run: |
        sudo apt-get -y update
        sudo apt-get -y install python3-pip
        pip install --no-cache-dir vcstool
      shell: bash

    - name: Run vcs import
      run: |
        mkdir src
        vcs import --shallow src < autoware.repos
        vcs import --shallow src < extra-packages.repos
      shell: bash

    - name: Import additional repositories
      if: ${{ inputs.additional-repos != '' }}
      run: |
        vcs import --shallow --force src < ${{ inputs.additional-repos }}
      shell: bash

    - name: Cache ccache
      uses: actions/cache@v4
      if: ${{ github.ref == 'refs/heads/main'}}
      id: cache-ccache
      with:
        path: |
          root-ccache
        key: ccache-${{ inputs.platform }}-${{ inputs.cache-tag-suffix }}-${{ hashFiles('src/**/*.cpp') }}
        restore-keys: |
          ccache-${{ inputs.platform }}-${{ inputs.cache-tag-suffix }}-
          ccache-${{ inputs.platform }}-

    - name: Cache apt-get
      uses: actions/cache@v4
      if: ${{ github.ref == 'refs/heads/main'}}
      id: cache-apt-get
      with:
        path: |
          var-cache-apt
        key: apt-get-${{ inputs.platform }}-${{ inputs.cache-tag-suffix }}-${{ hashFiles('src/**/package.xml') }}
        restore-keys: |
          apt-get-${{ inputs.platform }}-${{ inputs.cache-tag-suffix }}-
          apt-get-${{ inputs.platform }}-

    - name: Restore ccache
      uses: actions/cache/restore@v4
      if: ${{ github.ref != 'refs/heads/main'}}
      with:
        path: |
          root-ccache
        key: ccache-${{ inputs.platform }}-${{ inputs.cache-tag-suffix }}-${{ hashFiles('src/**/*.cpp') }}
        restore-keys: |
          ccache-${{ inputs.platform }}-${{ inputs.cache-tag-suffix }}-
          ccache-${{ inputs.platform }}-

    - name: Restore apt-get
      uses: actions/cache/restore@v4
      if: ${{ github.ref != 'refs/heads/main'}}
      with:
        path: |
          var-cache-apt
        key: apt-get-${{ inputs.platform }}-${{ inputs.cache-tag-suffix }}-${{ hashFiles('src/**/package.xml') }}
        restore-keys: |
          apt-get-${{ inputs.platform }}-${{ inputs.cache-tag-suffix }}-
          apt-get-${{ inputs.platform }}-

    - name: Inject cache into docker
      # TODO(youtalk): Use the release version again
      uses: reproducible-containers/buildkit-cache-dance@7c892679bab8ff382a8c88ab7f973d5e30a8f239
      with:
        utility-image: ghcr.io/containerd/busybox:latest
        cache-map: |
          {
            "root-ccache": "/root/.ccache",
            "var-cache-apt": "/var/cache/apt"
          }
        skip-extraction: ${{ steps.cache-ccache.outputs.cache-hit && steps.cache-apt-get.outputs.cache-hit }}

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ github.token }}

    - name: Run docker build
      uses: docker/build-push-action@v6
      with:
        file: docker/Dockerfile
        context: .
        push: false
        build-args: ${{ inputs.build-args }}
        cache-from: type=registry,ref=ghcr.io/${{ github.repository }}-buildcache:${{ inputs.platform }}-main
